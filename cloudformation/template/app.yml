AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating a Network Load Balancer and ECS service.

Parameters:
  ApplicationName:
    Type: String
    Description: The name of the application.

  DbName:
    Type: String
    Description: The name for the database
    Default: "orders"

  DbSecretsName:
    Type: String
    Description: The name of the AWS Secrets Manager secret containing the database credentials.
    Default: "db_secrets"

Resources:
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ApplicationName}-nlb'
      Type: network
      Scheme: internal
      Subnets: !Split [ ",", !ImportValue PrivateSubnetIds ]
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-nlb"

  EcsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ApplicationName}-nlb-tg'
      VpcId: !ImportValue VpcId
      Protocol: TCP
      Port: 8080
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: '8080'
      HealthCheckProtocol: HTTP
      HealthCheckPath: /actuator/health
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 10
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-nlb-tg-http"

  TcpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EcsTargetGroup


  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ApplicationName}-cluster'

  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub '${ApplicationName}.local'
      Vpc: !ImportValue VpcId
      Description: Service discovery namespace for private services

  ServiceDiscoveryRabbitService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: rabbit
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ApplicationName}-logs"
      RetentionInDays: 14

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ApplicationName
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !ImportValue ExecutionRoleArn
      TaskRoleArn: !ImportValue TaskRoleArn
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Image: lczago/orders-api:latest
          Secrets:
            - Name: SPRING_DATASOURCE_USERNAME
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DbSecretsName}:user::"
            - Name: SPRING_DATASOURCE_PASSWORD
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DbSecretsName}:password::"
          Environment:
            - Name: SPRING_DATASOURCE_URL
              Value: !Sub "jdbc:postgresql://{{resolve:ssm:/rds/${ApplicationName}/endpoint:1}}:{{resolve:ssm:/rds/${ApplicationName}/port:1}}/${DbName}"
            - Name: API_SERVER_PORT
              Value: "8080"
            - Name: AWS_PATH
              Value: "/default"
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ApplicationName}-logs"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Cpu: 1024
          Memory: 2048

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: TcpListener
    Properties:
      ServiceName: !Ref ApplicationName
      Cluster: !GetAtt EcsCluster.Arn
      TaskDefinition: !Ref EcsTaskDefinition
      DesiredCount: 1
      EnableExecuteCommand: true
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [ ",", !ImportValue PrivateSubnetIds ]
          SecurityGroups:
            - !ImportValue SgEcsId
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LoadBalancers:
        - TargetGroupArn: !Ref EcsTargetGroup
          ContainerName: !Ref ApplicationName
          ContainerPort: 8080

  EcsTaskDefinitionRabbit:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ApplicationName}-rabbit'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !ImportValue ExecutionRoleArn
      TaskRoleArn: !ImportValue TaskRoleArn
      ContainerDefinitions:
        - Name: rabbitmq
          Image: rabbitmq:4-management
          Environment:
            - Name: RABBITMQ_DEFAULT_USER
              Value: 'guest'
            - Name: RABBITMQ_DEFAULT_PASS
              Value: 'guest'
          Essential: true
          PortMappings:
            - ContainerPort: 5672
              HostPort: 5672
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ApplicationName}-logs"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  EcsServiceRabbit:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${ApplicationName}-rabbit'
      Cluster: !GetAtt EcsCluster.Arn
      TaskDefinition: !Ref EcsTaskDefinitionRabbit
      DesiredCount: 1
      EnableExecuteCommand: true
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [ ",", !ImportValue PrivateSubnetIds ]
          SecurityGroups:
            - !ImportValue SgEcsId
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryRabbitService.Arn
          ContainerName: rabbitmq
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  EcsTaskDefinitionService:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ApplicationName}-service'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !ImportValue ExecutionRoleArn
      TaskRoleArn: !ImportValue TaskRoleArn
      ContainerDefinitions:
        - Name: !Sub '${ApplicationName}-service'
          Image: lczago/orders-service:latest
          Secrets:
            - Name: SPRING_DATASOURCE_USERNAME
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DbSecretsName}:user::"
            - Name: SPRING_DATASOURCE_PASSWORD
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DbSecretsName}:password::"
          Environment:
            - Name: SPRING_DATASOURCE_URL
              Value: !Sub "jdbc:postgresql://{{resolve:ssm:/rds/${ApplicationName}/endpoint:1}}:{{resolve:ssm:/rds/${ApplicationName}/port:1}}/${DbName}"
            - Name: SERVICE_SERVER_PORT
              Value: '8081'
            - Name: SPRING_RABBITMQ_HOST
              Value: !Sub 'rabbit.${ApplicationName}.local'
            - Name: SPRING_RABBITMQ_PORT
              Value: '5672'
            - Name: SPRING_RABBITMQ_USERNAME
              Value: 'guest'
            - Name: SPRING_RABBITMQ_PASSWORD
              Value: 'guest'
          Essential: true
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8081
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${ApplicationName}-logs"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  EcsServiceService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${ApplicationName}-service'
      Cluster: !GetAtt EcsCluster.Arn
      TaskDefinition: !Ref EcsTaskDefinitionService
      DesiredCount: 1
      EnableExecuteCommand: true
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [ ",", !ImportValue PrivateSubnetIds ]
          SecurityGroups:
            - !ImportValue SgEcsId
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

Outputs:
  LoadBalancerDNSName:
    Description: The DNS name of the Network Load Balancer.
    Value: !GetAtt NetworkLoadBalancer.DNSName
    Export:
      Name: LoadBalancerDNS
  TargetGroupArn:
    Description: The ARN of the Target Group.
    Value: !Ref EcsTargetGroup
  ListenerArn:
    Description: The ARN of the Listener.
    Value: !Ref TcpListener
  NetworkLoadBalancerArn:
    Description: The ARN of the Network Load Balancer.
    Value: !Ref NetworkLoadBalancer
    Export:
      Name: !Sub "${ApplicationName}-NlbArn"