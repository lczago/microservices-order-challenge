AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  CloudFormation template to vpc, nat gateway, route tables, public and private subnets, and security groups for a Network Load Balancer,
  ECS tasks, and a database.

Parameters:
  ApplicationName:
    Type: String
    Description: The name of the application. Used as a prefix for resource names.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.99.0.0/24"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-vpc"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.99.0.0/28"
      AvailabilityZone: !Sub "${AWS::Region}a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-public-a"
        - Key: type
          Value: "public"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.99.0.16/28"
      AvailabilityZone: !Sub "${AWS::Region}b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-public-b"
        - Key: type
          Value: "public"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.99.0.48/28"
      AvailabilityZone: !Sub "${AWS::Region}a"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-private-a"
        - Key: type
          Value: "private"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.99.0.64/28"
      AvailabilityZone: !Sub "${AWS::Region}b"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-private-b"
        - Key: type
          Value: "private"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  AssociatePublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociatePublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-nat"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-private-rt"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  AssociatePrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  AssociatePrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  SgNlb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-sg-nlb"
      GroupDescription: "Security group for the Network Load Balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
          Description: "Allow HTTP traffic from anywhere"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "10.99.0.48/28"
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "10.99.0.64/28"
      Tags:
        - Key: Name
          Value: "sg-nlb"

  SgEcs:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-sg-ecs"
      GroupDescription: "Security group for the ECS tasks"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "10.99.0.48/28"
          Description: "Allow traffic from the NLB subnet 1"
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "10.99.0.64/28"
          Description: "Allow traffic from the NLB subnet 2"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: "10.99.0.48/28"
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: "10.99.0.64/28"
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 5672
          ToPort: 5672
          CidrIp: "10.99.0.48/28"
        - IpProtocol: tcp
          FromPort: 5672
          ToPort: 5672
          CidrIp: "10.99.0.64/28"
      Tags:
        - Key: Name
          Value: "sg-ecs"

  SgDb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-sg-db"
      GroupDescription: "Security group for the database"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref SgEcs
          Description: "Allow traffic from the ECS tasks"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: "sg-db"

Outputs:
  SgNlbId:
    Description: "The ID of the NLB Security Group."
    Value: !Ref SgNlb
    Export:
      Name: SgNlb
  SgEcsId:
    Description: "The ID of the ECS Security Group."
    Value: !Ref SgEcs
    Export:
      Name: SgEcsId
  SgDbId:
    Description: "The ID of the Database Security Group."
    Value: !Ref SgDb
    Export:
      Name: SgDbId
  VpcId:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: VpcId
  PublicSubnetIds:
    Description: A list of the public subnet IDs
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
  PrivateSubnetIds:
    Description: A list of the private subnet IDs
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
    Export:
      Name: PrivateSubnetIds
  NatGatewayEIPAddress:
    Description: The public IP address of the NAT Gateway
    Value: !Ref NatGatewayEIP
